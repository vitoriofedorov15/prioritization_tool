import os
import matplotlib.pyplot as plt
from fpdf import FPDF
import textwrap
import unicodedata


class UnicodePDF(FPDF):
    def __init__(self):
        super().__init__()
        try:
            self.add_font("DejaVu", "", "fonts/DejaVuSans.ttf", uni=True)
            self.add_font("DejaVu", "B", "fonts/DejaVuSans-Bold.ttf", uni=True)
            self.set_font("DejaVu", "", 9)
        except:
            self.set_font("Arial", "", 9)


def clean_text(text, max_length=300):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF"""
    if not text:
        return ""
    replacements = {
        "‚Äì": "-", "‚Äî": "-", "‚Ä¶": "...", "‚Äô": "'", "‚Äò": "'", "‚Äú": '"', "‚Äù": '"',
        "\u00A0": " ", "\u200B": "", "üîπ": "‚Ä¢"
    }
    for old, new in replacements.items():
        text = text.replace(old, new)
    text = ''.join(c for c in text if unicodedata.category(c)[0] != 'C')
    return text.strip()[:max_length]


def safe_multicell(pdf, text, width=100, cell_height=5):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏"""
    wrapped_lines = textwrap.wrap(clean_text(text), width=width,
                                  break_long_words=True, break_on_hyphens=True)
    if not wrapped_lines:
        wrapped_lines = [" "]
    for line in wrapped_lines:
        try:
            pdf.multi_cell(0, cell_height, line)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: '{line}' ‚Üí {e}")


def write_section(pdf, title, items):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
    pdf.set_font("DejaVu", "B", 12)
    pdf.set_text_color(0, 0, 128)
    safe_multicell(pdf, title, width=90, cell_height=7)
    pdf.set_draw_color(180, 180, 180)
    pdf.set_line_width(0.5)
    pdf.cell(0, 1, "", ln=True, border="T")
    pdf.ln(3)

    pdf.set_font("DejaVu", "", 9)
    pdf.set_text_color(0, 0, 0)

    for name, data in items:
        if isinstance(data, dict):
            score = data.get('score', 0)
            comment = data.get('comment', '')
            line = f"‚Ä¢ {name} ‚Äî –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {score:.4f} {comment}"
        else:
            line = f"‚Ä¢ {name} ‚Äî –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {data:.4f}"
        safe_multicell(pdf, line, width=90)
        pdf.ln(2)
    pdf.ln(4)


def generate_bar_chart(results, output_path, title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    names = list(results.keys())
    scores = [r['score'] if isinstance(r, dict) else r for r in results.values()]

    plt.figure(figsize=(10, 5))
    bars = plt.bar(names, scores, color='#4e79a7')
    plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    plt.title(title)
    plt.xticks(rotation=30, ha='right')

    for bar, score in zip(bars, scores):
        plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 0.01,
                 f'{score:.3f}', ha='center', va='bottom', fontsize=8)

    plt.tight_layout()
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()


def classify(results):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
    sorted_items = sorted(results.items(),
                          key=lambda x: -x[1]['score'] if isinstance(x[1], dict) else -x[1])
    high = [(k, v) for k, v in sorted_items if (v['score'] if isinstance(v, dict) else v) >= 0.6]
    medium = [(k, v) for k, v in sorted_items if 0.4 <= (v['score'] if isinstance(v, dict) else v) < 0.6]
    low = [(k, v) for k, v in sorted_items if (v['score'] if isinstance(v, dict) else v) < 0.4]
    return high, medium, low


def generate_report(results_type1, results_type2, filename="output/fuzzy_ahp_report.pdf"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ AHP"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Type-2
    type2_formatted = {k: {'score': v, 'comment': ''} for k, v in results_type2.items()}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    chart_type1 = "output/charts/ahp_type1.png"
    chart_type2 = "output/charts/ahp_type2.png"
    generate_bar_chart(results_type1, chart_type1, "Fuzzy AHP Type-1 (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤)")
    generate_bar_chart(type2_formatted, chart_type2, "Fuzzy AHP Type-2 (–í–µ—Å–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤)")

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    high_t1, med_t1, low_t1 = classify(results_type1)
    high_t2, med_t2, low_t2 = classify(type2_formatted)

    # –°–æ–∑–¥–∞–Ω–∏–µ PDF
    pdf = UnicodePDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    pdf.set_font("DejaVu", "B", 14)
    safe_multicell(pdf, "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (Fuzzy AHP)", width=100, cell_height=8)
    pdf.ln(10)

    # –†–∞–∑–¥–µ–ª Type-1
    pdf.set_font("DejaVu", "B", 12)
    safe_multicell(pdf, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuzzy AHP Type-1 (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã)", width=100)
    pdf.ln(2)

    try:
        if pdf.h - pdf.y > 100:
            pdf.image(chart_type1, x=10, y=pdf.get_y(), w=180)
            pdf.ln(110)
        else:
            pdf.add_page()
            pdf.image(chart_type1, x=10, y=20, w=180)
            pdf.ln(110)
    except Exception as e:
        safe_multicell(pdf, f"[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}]")
        pdf.ln(10)

    write_section(pdf, "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (‚â• 0.6):", high_t1)
    write_section(pdf, "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0.4-0.6):", med_t1)
    write_section(pdf, "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (< 0.4):", low_t1)

    # –†–∞–∑–¥–µ–ª Type-2
    pdf.add_page()
    pdf.set_font("DejaVu", "B", 12)
    safe_multicell(pdf, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuzzy AHP Type-2 (–ö—Ä–∏—Ç–µ—Ä–∏–∏)", width=100)
    pdf.ln(2)

    try:
        if pdf.h - pdf.y > 100:
            pdf.image(chart_type2, x=10, y=pdf.get_y(), w=180)
            pdf.ln(110)
        else:
            pdf.add_page()
            pdf.image(chart_type2, x=10, y=20, w=180)
            pdf.ln(110)
    except Exception as e:
        safe_multicell(pdf, f"[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}]")
        pdf.ln(10)

    write_section(pdf, "–ö–ª—é—á–µ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (‚â• 0.6):", high_t2)
    write_section(pdf, "–°—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (0.4-0.6):", med_t2)
    write_section(pdf, "–í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (< 0.4):", low_t2)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    pdf.output(filename)